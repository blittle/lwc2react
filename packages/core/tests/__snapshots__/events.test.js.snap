// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Events bound events in template 1`] = `
"import _implicitStylesheets from \\"./app.css\\";
import React from \\"react\\";

function tmpl($cmp) {
  return React.createElement(\\"div\\", {
    [tmpl.stylesheetTokens.shadowAttribute.toLowerCase()]: \\"true\\",
    key: 2,
    ref: $cmp.template
  }, [React.createElement(\\"span\\", {
    [tmpl.stylesheetTokens.shadowAttribute.toLowerCase()]: \\"true\\",
    key: 0
  }, $cmp.something), React.createElement(\\"button\\", {
    [tmpl.stylesheetTokens.shadowAttribute.toLowerCase()]: \\"true\\",
    key: 1,
    onClick: $cmp.increment.bind($cmp)
  }, \\"increment\\")]);
}

export default tmpl;
tmpl.stylesheets = [];

if (_implicitStylesheets) {
  tmpl.stylesheets.push.apply(tmpl.stylesheets, _implicitStylesheets);
}

tmpl.stylesheetTokens = {
  hostAttribute: \\"my-app_app-host\\",
  shadowAttribute: \\"my-app_app\\"
};"
`;

exports[`Events should dispatch custom events from the component ref 1`] = `
"import ObservableMembrane from \\"observable-membrane\\";
import React from \\"react\\";
import _tmpl from \\"./searchBar.html\\";

/**
 * Search Bar where visitors can search for stuff
 */
class SearchBar extends React.Component {
  constructor(...args) {
    super(...args);

    const membrane = new ObservableMembrane({
      valueMutated: () => {
        if (this.mounted)
          this.forceUpdate();
      }
    });

    this.__s = membrane.getProxy({});
    this.template = React.createRef();
    this.__s.query = \\"\\";
  }

  performSearch() {
    this.template.dispatchEvent(new CustomEvent(\\"someevent\\", {
      detail: this.query
    }));
  }

  render() {
    return _tmpl(Object.assign(this, this.props, this.__s));
  }

  componentDidMount() {
    this.mounted = true;
    this.stylesheets = [];

    _tmpl.stylesheets.forEach(stylesheet => {
      const sheet = document.createElement(\\"style\\");
      sheet.type = \\"text/css\\";

      sheet.textContent = stylesheet(
        \\"[\\" + _tmpl.stylesheetTokens.hostAttribute.toLowerCase() + \\"]\\",
        \\"[\\" + _tmpl.stylesheetTokens.shadowAttribute.toLowerCase() + \\"]\\",
        null
      );

      document.head.appendChild(sheet);
      this.stylesheets.push(sheet);
    });
  }

  componentWillUnmount() {
    this.mounted = false;

    this.stylesheets.forEach(sheet => {
      if (sheet.parentNode)
        sheet.parentNode.removeChild(sheet);
    });
  }
}

export default SearchBar;"
`;

exports[`Events should render input form events and attributes 1`] = `
"import _implicitStylesheets from \\"./searchBar.css\\";
import React from \\"react\\";

function tmpl($cmp) {
  return React.createElement(\\"div\\", {
    [tmpl.stylesheetTokens.shadowAttribute.toLowerCase()]: \\"true\\",
    key: 3,
    ref: $cmp.template,
    className: \\"site-search\\"
  }, [React.createElement(\\"span\\", {
    [tmpl.stylesheetTokens.shadowAttribute.toLowerCase()]: \\"true\\",
    key: 0,
    className: \\"fa fa-search\\"
  }, null), React.createElement(\\"input\\", {
    [tmpl.stylesheetTokens.shadowAttribute.toLowerCase()]: \\"true\\",
    key: 1,
    onInput: $cmp.searchInputHandler.bind($cmp),
    onKeyUp: $cmp.searchKeyUpHandler.bind($cmp),
    \\"value\\": $cmp.query,
    \\"autoFocus\\": true,
    \\"placeholder\\": \\"Search (keywords, brands, etc)\\",
    \\"type\\": \\"search\\",
    className: \\"form-control search-field\\"
  }, null), React.createElement(\\"i\\", {
    [tmpl.stylesheetTokens.shadowAttribute.toLowerCase()]: \\"true\\",
    key: 2,
    onClick: $cmp.handleIconClick.bind($cmp),
    className: \\"fa fa-search\\"
  }, null)]);
}

export default tmpl;
tmpl.stylesheets = [];

if (_implicitStylesheets) {
  tmpl.stylesheets.push.apply(tmpl.stylesheets, _implicitStylesheets);
}

tmpl.stylesheetTokens = {
  hostAttribute: \\"my-searchBar_searchBar-host\\",
  shadowAttribute: \\"my-searchBar_searchBar\\"
};"
`;
