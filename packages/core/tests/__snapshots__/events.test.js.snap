// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Events bound events in template 1`] = `
"import _implicitStylesheets from \\"./app.css\\";
import React from \\"react\\";

function tmpl($cmp) {
  return React.createElement(\\"div\\", {
    [tmpl.stylesheetTokens.shadowAttribute.toLowerCase()]: \\"true\\",
    key: 2,
    ref: $cmp.template
  }, [React.createElement(\\"span\\", {
    [tmpl.stylesheetTokens.shadowAttribute.toLowerCase()]: \\"true\\",
    key: 0
  }, $cmp.something), React.createElement(\\"button\\", {
    [tmpl.stylesheetTokens.shadowAttribute.toLowerCase()]: \\"true\\",
    key: 1,
    ref: $cmp.__ref1
  }, \\"increment\\")]);
}

export default tmpl;
tmpl.stylesheets = [];

if (_implicitStylesheets) {
  tmpl.stylesheets.push.apply(tmpl.stylesheets, _implicitStylesheets);
}

tmpl.stylesheetTokens = {
  hostAttribute: \\"my-app_app-host\\",
  shadowAttribute: \\"my-app_app\\"
};

tmpl.customEvents = [[\\"click\\", \\"increment\\", \\"__ref1\\"]];"
`;

exports[`Events should add event listeners to ref 1`] = `
"import LightningComponent from \\"lwc2react/lib/LightningComponent\\";
import ObservableMembrane from \\"observable-membrane\\";
import React from \\"react\\";
import _tmpl from \\"./searchBar.html\\";

/**
 * Search Bar where visitors can search for stuff
 */
class SearchBar extends LightningComponent {
  constructor(...args) {
    super(_tmpl);
    this.__s.query = \\"\\";
    this.template.current.addEventListener(\\"something\\", this.__s.performSearch);
    this.template.current.addEventListener(\\"something\\", this.__s.performSearch);
  }

  performSearch() {}

  render() {
    const prox = Object.assign({}, this, this.__s);
    prox.__proto__ = this.__proto__;
    return _tmpl(prox);
  }

  componentDidMount() {
    super.componentDidMount(_tmpl);
  }

  componentWillUnmount() {
    super.componentWillUnmount(_tmpl);
  }
}

export default SearchBar;"
`;

exports[`Events should convert custom events on templates 1`] = `
"import _implicitStylesheets from \\"./header.css\\";
import _mySearchBar from \\"my/searchBar\\";
import React from \\"react\\";

function tmpl($cmp) {
  return React.createElement(_mySearchBar, {
    [tmpl.stylesheetTokens.shadowAttribute.toLowerCase()]: \\"true\\",
    key: 0,
    ref: $cmp.template,
    ref: $cmp.template,
    \\"query\\": $cmp.query
  }, null);
}

export default tmpl;
tmpl.stylesheets = [];

if (_implicitStylesheets) {
  tmpl.stylesheets.push.apply(tmpl.stylesheets, _implicitStylesheets);
}

tmpl.stylesheetTokens = {
  hostAttribute: \\"my-header_header-host\\",
  shadowAttribute: \\"my-header_header\\"
};

tmpl.customEvents = [[\\"search\\", \\"updateQuery\\", \\"template\\"]];"
`;

exports[`Events should dispatch custom events from the component ref 1`] = `
"import LightningComponent from \\"lwc2react/lib/LightningComponent\\";
import ObservableMembrane from \\"observable-membrane\\";
import React from \\"react\\";
import _tmpl from \\"./searchBar.html\\";

/**
 * Search Bar where visitors can search for stuff
 */
class SearchBar extends LightningComponent {
  constructor(...args) {
    super(_tmpl);
    this.__s.query = \\"\\";
  }

  performSearch() {
    this.template.current.dispatchEvent(new CustomEvent(\\"someevent\\", {
      detail: this.query
    }));
  }

  render() {
    const prox = Object.assign({}, this, this.__s);
    prox.__proto__ = this.__proto__;
    return _tmpl(prox);
  }

  componentDidMount() {
    super.componentDidMount(_tmpl);
  }

  componentWillUnmount() {
    super.componentWillUnmount(_tmpl);
  }
}

export default SearchBar;"
`;

exports[`Events should dispatch custom events from the template 1`] = `
"import LightningComponent from \\"lwc2react/lib/LightningComponent\\";
import ObservableMembrane from \\"observable-membrane\\";
import React from \\"react\\";
import _tmpl from \\"./searchBar.html\\";

/**
 * Search Bar where visitors can search for stuff
 */
class SearchBar extends LightningComponent {
  constructor(...args) {
    super(_tmpl);
    this.__s.query = \\"\\";
  }

  performSearch() {
    this.template.current.dispatchEvent(new CustomEvent(\\"someevent\\", {
      detail: this.query
    }));
  }

  render() {
    const prox = Object.assign({}, this, this.__s);
    prox.__proto__ = this.__proto__;
    return _tmpl(prox);
  }

  componentDidMount() {
    super.componentDidMount(_tmpl);
  }

  componentWillUnmount() {
    super.componentWillUnmount(_tmpl);
  }
}

export default SearchBar;"
`;

exports[`Events should render input form events and attributes 1`] = `
"import _implicitStylesheets from \\"./searchBar.css\\";
import React from \\"react\\";

function tmpl($cmp) {
  return React.createElement(\\"div\\", {
    [tmpl.stylesheetTokens.shadowAttribute.toLowerCase()]: \\"true\\",
    key: 3,
    ref: $cmp.template,
    className: \\"site-search\\"
  }, [React.createElement(\\"span\\", {
    [tmpl.stylesheetTokens.shadowAttribute.toLowerCase()]: \\"true\\",
    key: 0,
    className: \\"fa fa-search\\"
  }, null), React.createElement(\\"input\\", {
    [tmpl.stylesheetTokens.shadowAttribute.toLowerCase()]: \\"true\\",
    key: 1,
    ref: $cmp.__ref2,
    \\"value\\": $cmp.query,
    \\"autoFocus\\": true,
    \\"placeholder\\": \\"Search (keywords, brands, etc)\\",
    \\"type\\": \\"search\\",
    className: \\"form-control search-field\\"
  }, null), React.createElement(\\"i\\", {
    [tmpl.stylesheetTokens.shadowAttribute.toLowerCase()]: \\"true\\",
    key: 2,
    ref: $cmp.__ref3,
    className: \\"fa fa-search\\"
  }, null)]);
}

export default tmpl;
tmpl.stylesheets = [];

if (_implicitStylesheets) {
  tmpl.stylesheets.push.apply(tmpl.stylesheets, _implicitStylesheets);
}

tmpl.stylesheetTokens = {
  hostAttribute: \\"my-searchBar_searchBar-host\\",
  shadowAttribute: \\"my-searchBar_searchBar\\"
};

tmpl.customEvents = [
  [\\"input\\", \\"searchInputHandler\\", \\"__ref2\\"],
  [\\"keyup\\", \\"searchKeyUpHandler\\", \\"__ref2\\"],
  [\\"click\\", \\"handleIconClick\\", \\"__ref3\\"]
];"
`;
