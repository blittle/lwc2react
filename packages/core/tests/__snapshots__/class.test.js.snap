// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`General Class Conversion Tests should convert a component that extends from something other than LightningElement 1`] = `
"import ObservableMembrane from \\"observable-membrane\\";
import React from \\"react\\";
import _tmpl from \\"./button.html\\";
import { classSet } from \\"lightning/utils\\";
import { normalizeString as normalize } from \\"lightning/utilsPrivate\\";
import LightningPrimitiveButton from \\"lightning/primitiveButton\\";
import template from \\"./button.html\\";

/**
         * A clickable element used to perform an action.
         */
class LightningButton extends LightningPrimitiveButton {
  constructor(...args) {
    super(...args);

    const membrane = new ObservableMembrane({
      valueMutated: () => {
        if (this.mounted)
          this.forceUpdate();
      }
    });

    if (!this.__s) {
      this.__s = membrane.getProxy({
        connectedCallback: this.connectedCallback,
        render: this.render
      });
    }

    this.template = React.createRef();
  }

  render() {
    return template;
  }

  render() {
    return _tmpl(Object.assign(this, this.props, this.__s));
  }

  componentDidMount() {
    this.mounted = true;
    this.stylesheets = [];

    _tmpl.stylesheets.forEach(stylesheet => {
      const sheet = document.createElement(\\"style\\");
      sheet.type = \\"text/css\\";

      sheet.textContent = stylesheet(
        \\"[\\" + _tmpl.stylesheetTokens.hostAttribute.toLowerCase() + \\"]\\",
        \\"[\\" + _tmpl.stylesheetTokens.shadowAttribute.toLowerCase() + \\"]\\",
        null
      );

      document.head.appendChild(sheet);
      this.stylesheets.push(sheet);
    });

    _tmpl.customEvents.forEach(event => {
      const name = event[0];
      const ref = event[1];
      this[ref] = this[ref].bind(this);
      this.template.current.addEventListener(name, this[ref]);
    });

    this.__s.test = \\"hi\\";
  }

  componentWillUnmount() {
    this.mounted = false;

    this.stylesheets.forEach(sheet => {
      if (sheet.parentNode)
        sheet.parentNode.removeChild(sheet);
    });

    _tmpl.customEvents.forEach(event => {
      const name = event[0];
      const ref = event[1];
      this.template.current.removeEventListener(name, this[ref]);
    });
  }
}

export default LightningButton;"
`;

exports[`General Class Conversion Tests should convert calls to this.template to this.template.current 1`] = `
"import ObservableMembrane from \\"observable-membrane\\";
import React from \\"react\\";
import _tmpl from \\"./button.html\\";
import { classSet } from \\"lightning/utils\\";
import { normalizeString as normalize } from \\"lightning/utilsPrivate\\";
import LightningPrimitiveButton from \\"lightning/primitiveButton\\";
import template from \\"./button.html\\";

/**
         * A clickable element used to perform an action.
         */
class LightningButton extends LightningPrimitiveButton {
  componentDidUpdate() {
    this.__s.template.host.style.pointerEvents = this.__s.disabled ? \\"none\\" : \\"\\";
    this.template.current.querySelector(\\"hi\\");
  }

  get computedIconClass() {
    return classSet(\\"slds-button__icon\\").add({
      \\"slds-button__icon_left\\": this.normalizedIconPosition === \\"left\\",
      \\"slds-button__icon_right\\": this.normalizedIconPosition === \\"right\\"
    }).toString();
  }

  render() {
    return _tmpl(Object.assign(this, this.props, this.__s));
  }

  componentDidMount() {
    this.mounted = true;
    this.stylesheets = [];

    _tmpl.stylesheets.forEach(stylesheet => {
      const sheet = document.createElement(\\"style\\");
      sheet.type = \\"text/css\\";

      sheet.textContent = stylesheet(
        \\"[\\" + _tmpl.stylesheetTokens.hostAttribute.toLowerCase() + \\"]\\",
        \\"[\\" + _tmpl.stylesheetTokens.shadowAttribute.toLowerCase() + \\"]\\",
        null
      );

      document.head.appendChild(sheet);
      this.stylesheets.push(sheet);
    });

    _tmpl.customEvents.forEach(event => {
      const name = event[0];
      const ref = event[1];
      this[ref] = this[ref].bind(this);
      this.template.current.addEventListener(name, this[ref]);
    });

    this.template.current.querySelector(\\"hi\\");
  }

  componentWillUnmount() {
    this.mounted = false;

    this.stylesheets.forEach(sheet => {
      if (sheet.parentNode)
        sheet.parentNode.removeChild(sheet);
    });

    _tmpl.customEvents.forEach(event => {
      const name = event[0];
      const ref = event[1];
      this.template.current.removeEventListener(name, this[ref]);
    });
  }
}

export default LightningButton;"
`;
