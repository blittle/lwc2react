// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`templates should compile an empty component 1`] = `
"import _implicitStylesheets from \\"./test.css\\";
import React from \\"react\\";

function tmpl($cmp) {
  return null;
}

export default tmpl;
tmpl.stylesheets = [];

if (_implicitStylesheets) {
  tmpl.stylesheets.push.apply(tmpl.stylesheets, _implicitStylesheets);
}

tmpl.stylesheetTokens = {
  hostAttribute: \\"my-test_test-host\\",
  shadowAttribute: \\"my-test_test\\"
};

tmpl.customEvents = [];"
`;

exports[`templates should compile class attributes 1`] = `
"import _implicitStylesheets from \\"./test.css\\";
import React from \\"react\\";

function tmpl($cmp) {
  return React.createElement(\\"div\\", {
    [tmpl.stylesheetTokens.shadowAttribute.toLowerCase()]: \\"true\\",
    key: 0,
    ref: $cmp.template,
    className: \\"hello\\"
  }, \\"text\\");
}

export default tmpl;
tmpl.stylesheets = [];

if (_implicitStylesheets) {
  tmpl.stylesheets.push.apply(tmpl.stylesheets, _implicitStylesheets);
}

tmpl.stylesheetTokens = {
  hostAttribute: \\"my-test_test-host\\",
  shadowAttribute: \\"my-test_test\\"
};

tmpl.customEvents = [];"
`;

exports[`templates should compile complex heirarchy with attributes 1`] = `
"import _implicitStylesheets from \\"./test.css\\";
import React from \\"react\\";

function tmpl($cmp) {
  return React.createElement(\\"figure\\", {
    [tmpl.stylesheetTokens.shadowAttribute.toLowerCase()]: \\"true\\",
    key: 3,
    ref: $cmp.template,
    \\"role\\": \\"group\\"
  }, [React.createElement(\\"img\\", {
    [tmpl.stylesheetTokens.shadowAttribute.toLowerCase()]: \\"true\\",
    key: 0,
    \\"src\\": \\"operahousesteps.jpg\\",
    \\"alt\\": \\"The Sydney Opera House\\",

    style: {
      \\"border\\": \\"1px\\",
      \\"borderColor\\": \\"red\\"
    }
  }, null), React.createElement(\\"figcaption\\", {
    [tmpl.stylesheetTokens.shadowAttribute.toLowerCase()]: \\"true\\",
    key: 2,
    className: \\"something else\\"
  }, [\\"We saw the opera \\", React.createElement(\\"cite\\", {
    [tmpl.stylesheetTokens.shadowAttribute.toLowerCase()]: \\"true\\",
    key: 1
  }, \\"Barber of Seville\\"), \\" here!\\"])]);
}

export default tmpl;
tmpl.stylesheets = [];

if (_implicitStylesheets) {
  tmpl.stylesheets.push.apply(tmpl.stylesheets, _implicitStylesheets);
}

tmpl.stylesheetTokens = {
  hostAttribute: \\"my-test_test-host\\",
  shadowAttribute: \\"my-test_test\\"
};

tmpl.customEvents = [];"
`;

exports[`templates should compile conditional blocks and expressions 1`] = `
"import ObservableMembrane from \\"observable-membrane\\";
import React from \\"react\\";
import _tmpl from \\"./app.html\\";

class ProductImage extends React.Component {
  constructor(...args) {
    super(...args);

    const membrane = new ObservableMembrane({
      valueMutated: () => {
        if (this.mounted)
          this.forceUpdate();
      }
    });

    if (!this.__s) {
      this.__s = membrane.getProxy({
        change: this.change
      });
    }

    this.template = React.createRef();
    this.__s.someValue = 1;
  }

  change() {
    const someValue = this.__s.someValue;

    if (this.__s.someValue) {
      this.__s.someValue = this.__s.someValue + 1;
    } else {
      this.__s.someValue = someValue + 1;
    }

    this.__s.someValue = this.__s.someValue ? this.__s.someValue + 1 : someValue + 1;
  }

  render() {
    return _tmpl(Object.assign(this, this.props, this.__s));
  }

  componentDidMount() {
    this.mounted = true;
    this.stylesheets = [];

    _tmpl.stylesheets.forEach(stylesheet => {
      const sheet = document.createElement(\\"style\\");
      sheet.type = \\"text/css\\";

      sheet.textContent = stylesheet(
        \\"[\\" + _tmpl.stylesheetTokens.hostAttribute.toLowerCase() + \\"]\\",
        \\"[\\" + _tmpl.stylesheetTokens.shadowAttribute.toLowerCase() + \\"]\\",
        null
      );

      document.head.appendChild(sheet);
      this.stylesheets.push(sheet);
    });

    _tmpl.customEvents.forEach(event => {
      const name = event[0];
      const ref = event[1];
      this[ref] = this[ref].bind(this);
      this.template.current.addEventListener(name, this[ref]);
    });
  }

  componentWillUnmount() {
    this.mounted = false;

    this.stylesheets.forEach(sheet => {
      if (sheet.parentNode)
        sheet.parentNode.removeChild(sheet);
    });

    _tmpl.customEvents.forEach(event => {
      const name = event[0];
      const ref = event[1];
      this.template.current.removeEventListener(name, this[ref]);
    });
  }
}

export default ProductImage;"
`;

exports[`templates should compile div with text 1`] = `
"import _implicitStylesheets from \\"./test.css\\";
import React from \\"react\\";

function tmpl($cmp) {
  return React.createElement(\\"div\\", {
    [tmpl.stylesheetTokens.shadowAttribute.toLowerCase()]: \\"true\\",
    key: 0,
    ref: $cmp.template
  }, \\"hi\\");
}

export default tmpl;
tmpl.stylesheets = [];

if (_implicitStylesheets) {
  tmpl.stylesheets.push.apply(tmpl.stylesheets, _implicitStylesheets);
}

tmpl.stylesheetTokens = {
  hostAttribute: \\"my-test_test-host\\",
  shadowAttribute: \\"my-test_test\\"
};

tmpl.customEvents = [];"
`;

exports[`templates should compile for loops 1`] = `
"import ObservableMembrane from \\"observable-membrane\\";
import React from \\"react\\";
import _tmpl from \\"./app.html\\";

class ProductImage extends React.Component {
  constructor(...args) {
    super(...args);

    const membrane = new ObservableMembrane({
      valueMutated: () => {
        if (this.mounted)
          this.forceUpdate();
      }
    });

    if (!this.__s) {
      this.__s = membrane.getProxy({
        change: this.change
      });
    }

    this.template = React.createRef();
    this.__s.someValue = 1;
  }

  change() {
    for (let i = this.__s.someValue; i < this.__s.someValue + 1; this.__s.someValue++) {
      this.__s.someValue = this.__s.someValue + 1;
    }
  }

  render() {
    return _tmpl(Object.assign(this, this.props, this.__s));
  }

  componentDidMount() {
    this.mounted = true;
    this.stylesheets = [];

    _tmpl.stylesheets.forEach(stylesheet => {
      const sheet = document.createElement(\\"style\\");
      sheet.type = \\"text/css\\";

      sheet.textContent = stylesheet(
        \\"[\\" + _tmpl.stylesheetTokens.hostAttribute.toLowerCase() + \\"]\\",
        \\"[\\" + _tmpl.stylesheetTokens.shadowAttribute.toLowerCase() + \\"]\\",
        null
      );

      document.head.appendChild(sheet);
      this.stylesheets.push(sheet);
    });

    _tmpl.customEvents.forEach(event => {
      const name = event[0];
      const ref = event[1];
      this[ref] = this[ref].bind(this);
      this.template.current.addEventListener(name, this[ref]);
    });
  }

  componentWillUnmount() {
    this.mounted = false;

    this.stylesheets.forEach(sheet => {
      if (sheet.parentNode)
        sheet.parentNode.removeChild(sheet);
    });

    _tmpl.customEvents.forEach(event => {
      const name = event[0];
      const ref = event[1];
      this.template.current.removeEventListener(name, this[ref]);
    });
  }
}

export default ProductImage;"
`;

exports[`templates should compile for:each directives 1`] = `
"import _implicitStylesheets from \\"./app.css\\";
import React from \\"react\\";

function tmpl($cmp) {
  return React.createElement(\\"ul\\", {
    [tmpl.stylesheetTokens.shadowAttribute.toLowerCase()]: \\"true\\",
    key: 1,
    ref: $cmp.template
  }, $cmp.list.map(item => React.createElement(\\"li\\", {
    [tmpl.stylesheetTokens.shadowAttribute.toLowerCase()]: \\"true\\",
    key: item.id
  }, item.value)));
}

export default tmpl;
tmpl.stylesheets = [];

if (_implicitStylesheets) {
  tmpl.stylesheets.push.apply(tmpl.stylesheets, _implicitStylesheets);
}

tmpl.stylesheetTokens = {
  hostAttribute: \\"my-app_app-host\\",
  shadowAttribute: \\"my-app_app\\"
};

tmpl.customEvents = [];"
`;

exports[`templates should compile for:each directives with dynamic attributes 1`] = `
"import _implicitStylesheets from \\"./app.css\\";
import React from \\"react\\";

function tmpl($cmp) {
  return React.createElement(\\"ul\\", {
    [tmpl.stylesheetTokens.shadowAttribute.toLowerCase()]: \\"true\\",
    key: 2,
    ref: $cmp.template
  }, $cmp.list.map(item => React.createElement(\\"li\\", {
    [tmpl.stylesheetTokens.shadowAttribute.toLowerCase()]: \\"true\\",
    key: item.id,
    \\"title\\": item.value,
    className: item.value
  }, React.createElement(\\"span\\", {
    [tmpl.stylesheetTokens.shadowAttribute.toLowerCase()]: \\"true\\",
    key: 0,
    className: $cmp.classProp
  }, item.value))));
}

export default tmpl;
tmpl.stylesheets = [];

if (_implicitStylesheets) {
  tmpl.stylesheets.push.apply(tmpl.stylesheets, _implicitStylesheets);
}

tmpl.stylesheetTokens = {
  hostAttribute: \\"my-app_app-host\\",
  shadowAttribute: \\"my-app_app\\"
};

tmpl.customEvents = [];"
`;

exports[`templates should compile forof loops 1`] = `
"import ObservableMembrane from \\"observable-membrane\\";
import React from \\"react\\";
import _tmpl from \\"./app.html\\";

class ProductImage extends React.Component {
  constructor(...args) {
    super(...args);

    const membrane = new ObservableMembrane({
      valueMutated: () => {
        if (this.mounted)
          this.forceUpdate();
      }
    });

    if (!this.__s) {
      this.__s = membrane.getProxy({
        change: this.change
      });
    }

    this.template = React.createRef();
    this.__s.arr = [1, 2];
  }

  change() {
    for (let el of this.__s.arr) {
      this.__s.arr.push(this.__s.something);
    }
  }

  render() {
    return _tmpl(Object.assign(this, this.props, this.__s));
  }

  componentDidMount() {
    this.mounted = true;
    this.stylesheets = [];

    _tmpl.stylesheets.forEach(stylesheet => {
      const sheet = document.createElement(\\"style\\");
      sheet.type = \\"text/css\\";

      sheet.textContent = stylesheet(
        \\"[\\" + _tmpl.stylesheetTokens.hostAttribute.toLowerCase() + \\"]\\",
        \\"[\\" + _tmpl.stylesheetTokens.shadowAttribute.toLowerCase() + \\"]\\",
        null
      );

      document.head.appendChild(sheet);
      this.stylesheets.push(sheet);
    });

    _tmpl.customEvents.forEach(event => {
      const name = event[0];
      const ref = event[1];
      this[ref] = this[ref].bind(this);
      this.template.current.addEventListener(name, this[ref]);
    });
  }

  componentWillUnmount() {
    this.mounted = false;

    this.stylesheets.forEach(sheet => {
      if (sheet.parentNode)
        sheet.parentNode.removeChild(sheet);
    });

    _tmpl.customEvents.forEach(event => {
      const name = event[0];
      const ref = event[1];
      this.template.current.removeEventListener(name, this[ref]);
    });
  }
}

export default ProductImage;"
`;

exports[`templates should compile generic attributes 1`] = `
"import _implicitStylesheets from \\"./test.css\\";
import React from \\"react\\";

function tmpl($cmp) {
  return React.createElement(\\"div\\", {
    [tmpl.stylesheetTokens.shadowAttribute.toLowerCase()]: \\"true\\",
    key: 0,
    ref: $cmp.template,
    \\"title\\": \\"wow\\"
  }, \\"text\\");
}

export default tmpl;
tmpl.stylesheets = [];

if (_implicitStylesheets) {
  tmpl.stylesheets.push.apply(tmpl.stylesheets, _implicitStylesheets);
}

tmpl.stylesheetTokens = {
  hostAttribute: \\"my-test_test-host\\",
  shadowAttribute: \\"my-test_test\\"
};

tmpl.customEvents = [];"
`;

exports[`templates should compile if:true directives 1`] = `
"import _implicitStylesheets from \\"./app.css\\";
import React from \\"react\\";

function tmpl($cmp) {
  return [$cmp.someProp ? React.createElement(\\"div\\", {
    [tmpl.stylesheetTokens.shadowAttribute.toLowerCase()]: \\"true\\",
    key: 0
  }, \\"a\\") : null, !$cmp.someProp ? React.createElement(\\"div\\", {
    [tmpl.stylesheetTokens.shadowAttribute.toLowerCase()]: \\"true\\",
    key: 1
  }, \\"b\\") : null];
}

export default tmpl;
tmpl.stylesheets = [];

if (_implicitStylesheets) {
  tmpl.stylesheets.push.apply(tmpl.stylesheets, _implicitStylesheets);
}

tmpl.stylesheetTokens = {
  hostAttribute: \\"my-app_app-host\\",
  shadowAttribute: \\"my-app_app\\"
};

tmpl.customEvents = [];"
`;

exports[`templates should compile multiple nested divs with text 1`] = `
"import _implicitStylesheets from \\"./test.css\\";
import React from \\"react\\";

function tmpl($cmp) {
  return React.createElement(\\"div\\", {
    [tmpl.stylesheetTokens.shadowAttribute.toLowerCase()]: \\"true\\",
    key: 2,
    ref: $cmp.template
  }, [React.createElement(\\"div\\", {
    [tmpl.stylesheetTokens.shadowAttribute.toLowerCase()]: \\"true\\",
    key: 0
  }, \\"hi 1\\"), React.createElement(\\"div\\", {
    [tmpl.stylesheetTokens.shadowAttribute.toLowerCase()]: \\"true\\",
    key: 1
  }, \\"hi 2\\")]);
}

export default tmpl;
tmpl.stylesheets = [];

if (_implicitStylesheets) {
  tmpl.stylesheets.push.apply(tmpl.stylesheets, _implicitStylesheets);
}

tmpl.stylesheetTokens = {
  hostAttribute: \\"my-test_test-host\\",
  shadowAttribute: \\"my-test_test\\"
};

tmpl.customEvents = [];"
`;

exports[`templates should compile style attributes 1`] = `
"import _implicitStylesheets from \\"./test.css\\";
import React from \\"react\\";

function tmpl($cmp) {
  return React.createElement(\\"div\\", {
    [tmpl.stylesheetTokens.shadowAttribute.toLowerCase()]: \\"true\\",
    key: 0,
    ref: $cmp.template,

    style: {
      \\"color\\": \\"red\\"
    }
  }, \\"text\\");
}

export default tmpl;
tmpl.stylesheets = [];

if (_implicitStylesheets) {
  tmpl.stylesheets.push.apply(tmpl.stylesheets, _implicitStylesheets);
}

tmpl.stylesheetTokens = {
  hostAttribute: \\"my-test_test-host\\",
  shadowAttribute: \\"my-test_test\\"
};

tmpl.customEvents = [];"
`;

exports[`templates should compile the lwc class into a react class that renders the template 1`] = `
"import ObservableMembrane from \\"observable-membrane\\";
import _tmpl from \\"./test.html\\";
import React from \\"react\\";

class Test extends React.Component {
  render() {
    return _tmpl(Object.assign(this, this.props, this.__s));
  }

  componentDidMount() {
    this.mounted = true;
    this.stylesheets = [];

    _tmpl.stylesheets.forEach(stylesheet => {
      const sheet = document.createElement(\\"style\\");
      sheet.type = \\"text/css\\";

      sheet.textContent = stylesheet(
        \\"[\\" + _tmpl.stylesheetTokens.hostAttribute.toLowerCase() + \\"]\\",
        \\"[\\" + _tmpl.stylesheetTokens.shadowAttribute.toLowerCase() + \\"]\\",
        null
      );

      document.head.appendChild(sheet);
      this.stylesheets.push(sheet);
    });

    _tmpl.customEvents.forEach(event => {
      const name = event[0];
      const ref = event[1];
      this[ref] = this[ref].bind(this);
      this.template.current.addEventListener(name, this[ref]);
    });
  }

  componentWillUnmount() {
    this.mounted = false;

    this.stylesheets.forEach(sheet => {
      if (sheet.parentNode)
        sheet.parentNode.removeChild(sheet);
    });

    _tmpl.customEvents.forEach(event => {
      const name = event[0];
      const ref = event[1];
      this.template.current.removeEventListener(name, this[ref]);
    });
  }
}

export default Test;"
`;

exports[`templates should convert ID attributes 1`] = `
"import _implicitStylesheets from \\"./app.css\\";
import React from \\"react\\";

function tmpl($cmp) {
  return React.createElement(\\"div\\", {
    [tmpl.stylesheetTokens.shadowAttribute.toLowerCase()]: \\"true\\",
    key: 0,
    ref: $cmp.template,
    \\"id\\": \\"1\\"
  }, \\"content\\");
}

export default tmpl;
tmpl.stylesheets = [];

if (_implicitStylesheets) {
  tmpl.stylesheets.push.apply(tmpl.stylesheets, _implicitStylesheets);
}

tmpl.stylesheetTokens = {
  hostAttribute: \\"my-app_app-host\\",
  shadowAttribute: \\"my-app_app\\"
};

tmpl.customEvents = [];"
`;

exports[`templates should generate the proper template with api bound props 1`] = `
"import _implicitStylesheets from \\"./product.css\\";
import React from \\"react\\";

function tmpl($cmp) {
  return React.createElement(\\"h1\\", {
    [tmpl.stylesheetTokens.shadowAttribute.toLowerCase()]: \\"true\\",
    key: 0,
    ref: $cmp.template
  }, [\\"Product: \\", $cmp.params.productId]);
}

export default tmpl;
tmpl.stylesheets = [];

if (_implicitStylesheets) {
  tmpl.stylesheets.push.apply(tmpl.stylesheets, _implicitStylesheets);
}

tmpl.stylesheetTokens = {
  hostAttribute: \\"my-product_product-host\\",
  shadowAttribute: \\"my-product_product\\"
};

tmpl.customEvents = [];"
`;
