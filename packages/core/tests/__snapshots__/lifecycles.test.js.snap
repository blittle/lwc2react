// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Lifecycles connectedCallback 1`] = `
"import ObservableMembrane from \\"observable-membrane\\";
import React from \\"react\\";
import _tmpl from \\"./test.html\\";

class Test extends React.Component {
  constructor(...args) {
    super(...args);

    const membrane = new ObservableMembrane({
      valueMutated: () => {
        if (this.mounted)
          this.forceUpdate();
      }
    });

    this.__s = membrane.getProxy({
      connectedCallback: this.connectedCallback
    });

    this.template = React.createRef();
    this.__s.a = 1;
  }

  render() {
    return _tmpl(Object.assign(this, this.props, this.__s));
  }

  componentDidMount() {
    this.mounted = true;
    this.stylesheets = [];

    _tmpl.stylesheets.forEach(stylesheet => {
      const sheet = document.createElement(\\"style\\");
      sheet.type = \\"text/css\\";

      sheet.textContent = stylesheet(
        \\"[\\" + _tmpl.stylesheetTokens.hostAttribute.toLowerCase() + \\"]\\",
        \\"[\\" + _tmpl.stylesheetTokens.shadowAttribute.toLowerCase() + \\"]\\",
        null
      );

      document.head.appendChild(sheet);
      this.stylesheets.push(sheet);
    });

    _tmpl.customEvents.forEach(event => {
      const name = event[0];
      const ref = event[1];
      this[ref] = this[ref].bind(this);
      this.template.current.addEventListener(name, this[ref]);
    });

    this.__s.a++;
    this.__s.a++;
    this.__s.a++;
  }

  componentWillUnmount() {
    this.mounted = false;

    this.stylesheets.forEach(sheet => {
      if (sheet.parentNode)
        sheet.parentNode.removeChild(sheet);
    });

    _tmpl.customEvents.forEach(event => {
      const name = event[0];
      const ref = event[1];
      this.template.current.removeEventListener(name, this[ref]);
    });
  }
}

export default Test;"
`;

exports[`Lifecycles disconnectedCallback 1`] = `
"import ObservableMembrane from \\"observable-membrane\\";
import React from \\"react\\";
import _tmpl from \\"./test.html\\";

class Test extends React.Component {
  constructor(...args) {
    super(...args);

    const membrane = new ObservableMembrane({
      valueMutated: () => {
        if (this.mounted)
          this.forceUpdate();
      }
    });

    this.__s = membrane.getProxy({
      disconnectedCallback: this.disconnectedCallback
    });

    this.template = React.createRef();
    this.__s.a = 1;
  }

  render() {
    return _tmpl(Object.assign(this, this.props, this.__s));
  }

  componentDidMount() {
    this.mounted = true;
    this.stylesheets = [];

    _tmpl.stylesheets.forEach(stylesheet => {
      const sheet = document.createElement(\\"style\\");
      sheet.type = \\"text/css\\";

      sheet.textContent = stylesheet(
        \\"[\\" + _tmpl.stylesheetTokens.hostAttribute.toLowerCase() + \\"]\\",
        \\"[\\" + _tmpl.stylesheetTokens.shadowAttribute.toLowerCase() + \\"]\\",
        null
      );

      document.head.appendChild(sheet);
      this.stylesheets.push(sheet);
    });

    _tmpl.customEvents.forEach(event => {
      const name = event[0];
      const ref = event[1];
      this[ref] = this[ref].bind(this);
      this.template.current.addEventListener(name, this[ref]);
    });
  }

  componentWillUnmount() {
    this.mounted = false;

    this.stylesheets.forEach(sheet => {
      if (sheet.parentNode)
        sheet.parentNode.removeChild(sheet);
    });

    _tmpl.customEvents.forEach(event => {
      const name = event[0];
      const ref = event[1];
      this.template.current.removeEventListener(name, this[ref]);
    });

    this.__s.a++;
    this.__s.a++;
    this.__s.a++;
  }
}

export default Test;"
`;

exports[`Lifecycles errorCallback 1`] = `
"import ObservableMembrane from \\"observable-membrane\\";
import React from \\"react\\";
import _tmpl from \\"./test.html\\";

class Test extends React.Component {
  constructor(...args) {
    super(...args);

    const membrane = new ObservableMembrane({
      valueMutated: () => {
        if (this.mounted)
          this.forceUpdate();
      }
    });

    this.__s = membrane.getProxy({
      errorCallback: this.errorCallback
    });

    this.template = React.createRef();
    this.__s.a = 1;
  }

  componentDidCatch(error, stack) {
    this.__s.a++;
    this.__s.a++;
    this.__s.a++;
  }

  render() {
    return _tmpl(Object.assign(this, this.props, this.__s));
  }

  componentDidMount() {
    this.mounted = true;
    this.stylesheets = [];

    _tmpl.stylesheets.forEach(stylesheet => {
      const sheet = document.createElement(\\"style\\");
      sheet.type = \\"text/css\\";

      sheet.textContent = stylesheet(
        \\"[\\" + _tmpl.stylesheetTokens.hostAttribute.toLowerCase() + \\"]\\",
        \\"[\\" + _tmpl.stylesheetTokens.shadowAttribute.toLowerCase() + \\"]\\",
        null
      );

      document.head.appendChild(sheet);
      this.stylesheets.push(sheet);
    });

    _tmpl.customEvents.forEach(event => {
      const name = event[0];
      const ref = event[1];
      this[ref] = this[ref].bind(this);
      this.template.current.addEventListener(name, this[ref]);
    });
  }

  componentWillUnmount() {
    this.mounted = false;

    this.stylesheets.forEach(sheet => {
      if (sheet.parentNode)
        sheet.parentNode.removeChild(sheet);
    });

    _tmpl.customEvents.forEach(event => {
      const name = event[0];
      const ref = event[1];
      this.template.current.removeEventListener(name, this[ref]);
    });
  }
}

export default Test;"
`;

exports[`Lifecycles renderedCallback 1`] = `
"import ObservableMembrane from \\"observable-membrane\\";
import React from \\"react\\";
import _tmpl from \\"./test.html\\";

class Test extends React.Component {
  constructor(...args) {
    super(...args);

    const membrane = new ObservableMembrane({
      valueMutated: () => {
        if (this.mounted)
          this.forceUpdate();
      }
    });

    this.__s = membrane.getProxy({
      renderedCallback: this.renderedCallback
    });

    this.template = React.createRef();
    this.__s.a = 1;
  }

  componentDidUpdate() {
    this.__s.a++;
    this.__s.a++;
    this.__s.a++;
  }

  render() {
    return _tmpl(Object.assign(this, this.props, this.__s));
  }

  componentDidMount() {
    this.mounted = true;
    this.stylesheets = [];

    _tmpl.stylesheets.forEach(stylesheet => {
      const sheet = document.createElement(\\"style\\");
      sheet.type = \\"text/css\\";

      sheet.textContent = stylesheet(
        \\"[\\" + _tmpl.stylesheetTokens.hostAttribute.toLowerCase() + \\"]\\",
        \\"[\\" + _tmpl.stylesheetTokens.shadowAttribute.toLowerCase() + \\"]\\",
        null
      );

      document.head.appendChild(sheet);
      this.stylesheets.push(sheet);
    });

    _tmpl.customEvents.forEach(event => {
      const name = event[0];
      const ref = event[1];
      this[ref] = this[ref].bind(this);
      this.template.current.addEventListener(name, this[ref]);
    });
  }

  componentWillUnmount() {
    this.mounted = false;

    this.stylesheets.forEach(sheet => {
      if (sheet.parentNode)
        sheet.parentNode.removeChild(sheet);
    });

    _tmpl.customEvents.forEach(event => {
      const name = event[0];
      const ref = event[1];
      this.template.current.removeEventListener(name, this[ref]);
    });
  }
}

export default Test;"
`;
